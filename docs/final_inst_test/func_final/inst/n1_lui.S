#include <asm.h>
#include <regdef.h>
#include <inst_test.h>

LEAF(n1_lui_test)
    .set noreorder
    addiu s0, s0 ,1
    addiu s2, zero, 0x0
##set led
    LI (t0, LED_ADDR)
    li t1, 0xffef
	sw t1, 0(t0)
###test inst
    TEST_MATCH(0x1234563c, 0x12345678, 0x00000001)
    TEST_MATCH(0x12345634, 0x12341234, 0x00000000)
    TEST_MATCH(0x12345637, 0x12345678, 0xffffffff)
    TEST_MATCH(0x6b8b4567, 0x327b23c6, 0xffffffff)
    TEST_MATCH(0x643c9869, 0x66334873, 0x0000000b)
    TEST_MATCH(0x2ae8944a, 0x625558ec, 0x00000013)
    TEST_MATCH(0x436c6125, 0x628c895d, 0x00000006)
    TEST_MATCH(0x71f32454, 0x2ca88611, 0x00000011)
    TEST_MATCH(0x0836c40e, 0x02901d82, 0x00000009)
    TEST_MATCH(0x2cd89a32, 0x57e4ccaf, 0x00000006)
    TEST_MATCH(0x5ff87e05, 0x2f305def, 0x0000000c)
    TEST_MATCH(0x4ad084e9, 0x1f48eaa1, 0x00000013)
    TEST_MATCH(0x098a3148, 0x799d0247, 0x00000003)
    TEST_MATCH(0x661e3f1e, 0x5dc79ea8, 0x0000000e)
    TEST_MATCH(0x0bf72b14, 0x11447b73, 0x00000014)
    TEST_MATCH(0x4a2ac315, 0x39ee015c, 0x00000004)
    TEST_MATCH(0x49da307d, 0x7055a5f5, 0x00000002)
    TEST_MATCH(0x53299938, 0x1fbfe8e0, 0x00000002)
    TEST_MATCH(0x097e1b4e, 0x51088277, 0x00000003)
    TEST_MATCH(0x78df6a55, 0x39b7aaa2, 0x00000005)
    TEST_MATCH(0x5d888a08, 0x2a082c70, 0x00000010)
    TEST_MATCH(0x75e0858a, 0x57a61a29, 0x00000002)
    TEST_MATCH(0x634c574c, 0x24e99dd7, 0x0000000d)
    TEST_MATCH(0x2a31b62d, 0x1849c29b, 0xffffffff)
    TEST_MATCH(0x6e534cde, 0x1a0dde32, 0x00000008)
    TEST_MATCH(0x14d53685, 0x230f856c, 0x00000008)
    TEST_MATCH(0x0dcdf8f6, 0x52d7b105, 0x0000000b)
    TEST_MATCH(0x36b2acbc, 0x779d8544, 0x00000015)
    TEST_MATCH(0x3a966cd0, 0x63f37e85, 0x00000003)
    TEST_MATCH(0x19a52566, 0x335a1df1, 0x00000017)
    TEST_MATCH(0x28677b7c, 0x378d97c0, 0x00000004)
    TEST_MATCH(0x30aadfda, 0x30eada61, 0x00000008)
    TEST_MATCH(0x57ce66b4, 0x67a70b69, 0x00000001)
    TEST_MATCH(0x2e5b12b8, 0x5c03d76d, 0x00000017)
    TEST_MATCH(0x1c7e3c01, 0x1c2201ff, 0x00000008)
    TEST_MATCH(0x5e74c4d9, 0x3b3ebe15, 0x00000015)
    TEST_MATCH(0x3822cb01, 0x6ce00443, 0x0000000a)
    TEST_MATCH(0x2a79ec49, 0x338125cf, 0x0000000a)
    TEST_MATCH(0x4fa327ce, 0x1873983a, 0x0000000e)
    TEST_MATCH(0x1565ac99, 0x19fb2650, 0x00000006)
    TEST_MATCH(0x3b1dd403, 0x530386d1, 0x00000010)
    TEST_MATCH(0x4ba9831a, 0x06d71a2b, 0x00000008)
    TEST_MATCH(0x0cfc7321, 0x1421971b, 0x00000010)
    TEST_MATCH(0x1f404301, 0x116e0907, 0xffffffff)
    TEST_MATCH(0x4b232ee3, 0x159c74cf, 0x0000000d)
    TEST_MATCH(0x44e2ed6c, 0x02219b33, 0x00000006)
    TEST_MATCH(0x2109cda4, 0x577f5a4d, 0x00000004)
    TEST_MATCH(0x4a0ffa11, 0x5e446208, 0x0000000e)
    TEST_MATCH(0x62548fd8, 0x0fa085b0, 0x00000001)
    TEST_MATCH(0x04e5dcb5, 0x41e96bdb, 0x00000009)
    TEST_MATCH(0x0ac68ffb, 0x63df3fb7, 0x00000004)
    TEST_MATCH(0x0805b331, 0x060a1463, 0x00000001)
    TEST_MATCH(0x76c44e4e, 0x0e04e6ce, 0x0000000c)
    TEST_MATCH(0x6505f02e, 0x2fe5d025, 0x0000000d)
    TEST_MATCH(0x404eaf4a, 0x4a16874f, 0x00000018)
    TEST_MATCH(0x70a42016, 0x161bc243, 0x00000018)
    TEST_MATCH(0x32766a55, 0x22d71957, 0x00000002)
    TEST_MATCH(0x70cc332f, 0x5661786e, 0x0000000b)
    TEST_MATCH(0x3af6a220, 0x3c5ea902, 0x00000003)
    TEST_MATCH(0x6def5211, 0x1112dbb6, 0x00000014)
    TEST_MATCH(0x24f5d018, 0x6780c122, 0x0000000b)
    TEST_MATCH(0x7ad7fca2, 0x63351604, 0x0000000b)
    TEST_MATCH(0x1a8762f4, 0x7f41d049, 0x00000014)
    TEST_MATCH(0x449f66fe, 0x557e0515, 0xffffffff)
    TEST_MATCH(0x563a1a5c, 0x2973f88f, 0x00000012)
    TEST_MATCH(0x3a541011, 0x4423c777, 0x00000011)
    TEST_MATCH(0x05157276, 0x35a681db, 0x00000002)
    TEST_MATCH(0x66d021ca, 0x56167394, 0x00000001)
    TEST_MATCH(0x3cd22b79, 0x3137975e, 0x0000000c)
    TEST_MATCH(0x5c64ad75, 0x2cdd5b39, 0x0000000e)
    TEST_MATCH(0x0cb55ff3, 0x21df319e, 0x0000000c)
    TEST_MATCH(0x23502a61, 0x461bc834, 0x00000014)
    TEST_MATCH(0x1c8a8acf, 0x0e73dfe0, 0x0000000e)
    TEST_MATCH(0x317e611d, 0x7a61d75b, 0x0000000c)
    TEST_MATCH(0x1fa33267, 0x2e19dd00, 0x0000000e)
    TEST_MATCH(0x1e22bcb2, 0x3565f1c8, 0x00000011)
    TEST_MATCH(0x5ea6d896, 0x3d096bbf, 0x0000000c)
    TEST_MATCH(0x0bd6d5b5, 0x3b52115c, 0x00000014)
    TEST_MATCH(0x527f603d, 0x7e13d013, 0x0000000c)
    TEST_MATCH(0x645ec5ab, 0x11c5abef, 0x00000008)
    TEST_MATCH(0x1b1bccf5, 0x56cdfabb, 0x00000007)
    TEST_MATCH(0x475553ab, 0x5ab3ea93, 0x00000014)
    TEST_MATCH(0x7417684f, 0x0e9e1415, 0x00000011)
    TEST_MATCH(0x0001893d, 0x13d4a2f2, 0x00000014)
    TEST_MATCH(0x68abefb0, 0x326c3c76, 0x0000000e)
    TEST_MATCH(0x58a36fca, 0x129b95f2, 0x00000009)
    TEST_MATCH(0x0acd4c11, 0x111817cf, 0x00000014)
    TEST_MATCH(0x3837f1df, 0x5be02a44, 0x00000015)
    TEST_MATCH(0x533a7cfd, 0x5a7ed215, 0x0000000f)
    TEST_MATCH(0x5fe6c53f, 0x3cae14fe, 0x00000002)
    TEST_MATCH(0x6572cf1b, 0x6e4e1c1b, 0x00000000)
    TEST_MATCH(0x7c901113, 0x427028b0, 0x00000015)
    TEST_MATCH(0x05ef4b64, 0x2457647b, 0x00000008)
    TEST_MATCH(0x7fe72292, 0x60c94a46, 0x0000000f)
    TEST_MATCH(0x12552b10, 0x0f4e8872, 0x00000007)
    TEST_MATCH(0x46182e75, 0x79311d4c, 0x00000006)
    TEST_MATCH(0x6599b689, 0x58625c6d, 0x0000000e)
    TEST_MATCH(0x68e13f8e, 0x51c07f53, 0x00000015)
    TEST_MATCH(0x16e7e3c7, 0x063fec9a, 0x00000013)
    TEST_MATCH(0x3af676b7, 0x6b6fd84e, 0x00000011)
    TEST_MATCH(0x5e194eec, 0x03b69ecd, 0x00000004)
    TEST_MATCH(0x5787d524, 0x19248b51, 0x0000000d)
    TEST_MATCH(0x05c243f1, 0x21be2f84, 0x0000000d)
    TEST_MATCH(0x1e0491cd, 0x1a0ed871, 0xffffffff)
    TEST_MATCH(0x25ccb279, 0x4ed6f798, 0x00000004)
    TEST_MATCH(0x063d1051, 0x0f641ca2, 0x00000001)
    TEST_MATCH(0x2a84f0f7, 0x7b37afbb, 0x00000003)
    TEST_MATCH(0x7138b819, 0x65a9e333, 0x00000005)
    TEST_MATCH(0x71809378, 0x5e1e8ab7, 0x00000016)
    TEST_MATCH(0x56bf33f6, 0x6c3a37b1, 0x00000003)
    TEST_MATCH(0x09ae133e, 0x247d7cef, 0x00000011)
    TEST_MATCH(0x45eb77e8, 0x469be822, 0x00000008)
    TEST_MATCH(0x0f02b952, 0x14a73585, 0x00000016)
    TEST_MATCH(0x57034e20, 0x13e08266, 0x0000000a)
    TEST_MATCH(0x3683b3e2, 0x7c4b4806, 0x00000015)
    TEST_MATCH(0x10f27d8c, 0x026c64ae, 0x0000000b)
    TEST_MATCH(0x57aa92ea, 0x0693abdf, 0x0000000a)
    TEST_MATCH(0x097ab90e, 0x0e227944, 0x00000018)
    TEST_MATCH(0x1e7e26d6, 0x399d6ba1, 0x0000000c)
    TEST_MATCH(0x684b2f6e, 0x7293711f, 0x0000000b)
    TEST_MATCH(0x529e34bd, 0x0decacaf, 0x00000013)
    TEST_MATCH(0x63490122, 0x1388b868, 0x0000000e)
    TEST_MATCH(0x39951379, 0x5bce15e4, 0x00000002)
    TEST_MATCH(0x687266fe, 0x4202de09, 0xffffffff)
    TEST_MATCH(0x11bfda2c, 0x600b0bf0, 0x0000000e)
    TEST_MATCH(0x7e997b57, 0x2bba481f, 0x00000017)
    TEST_MATCH(0x3ed5885b, 0x37385bb8, 0x00000008)
    TEST_MATCH(0x45e8f53e, 0x5cd867d3, 0x00000005)
    TEST_MATCH(0x511e308f, 0x11ee2399, 0x00000015)
    TEST_MATCH(0x4886f0fd, 0x01fb6481, 0x00000011)
    TEST_MATCH(0x48328442, 0x5a6f5094, 0x00000006)
    TEST_MATCH(0x33710114, 0x08286448, 0x00000011)
    TEST_MATCH(0x4775f12a, 0x71cfcb2a, 0x00000000)
    TEST_MATCH(0x2a52a07a, 0x0cef5302, 0x0000000d)
    TEST_MATCH(0x32771d73, 0x726b9f7c, 0x0000000b)
    TEST_MATCH(0x5466cc8e, 0x11c50a94, 0x00000015)
    TEST_MATCH(0x78351f1e, 0x103b63ce, 0x00000005)
    TEST_MATCH(0x54d9439b, 0x4db63022, 0x00000017)
    TEST_MATCH(0x02d9d673, 0x09730e9e, 0x00000010)
    TEST_MATCH(0x72b1f15e, 0x5f422af6, 0x00000003)
    TEST_MATCH(0x7d349674, 0x6741b7e1, 0x00000014)
    TEST_MATCH(0x680d2983, 0x0daea0c2, 0x00000006)
    TEST_MATCH(0x6e98127f, 0x7fba5abe, 0x00000018)
    TEST_MATCH(0x3e1ce314, 0x222920b0, 0x00000011)
    TEST_MATCH(0x6ac5664c, 0x429f2616, 0x00000007)
    TEST_MATCH(0x0b47d943, 0x30da180c, 0x0000000b)
    TEST_MATCH(0x0122e220, 0x6d488818, 0x00000006)
    TEST_MATCH(0x2e3922de, 0x0b3c6f6e, 0x00000007)
    TEST_MATCH(0x1a025182, 0x0e882a3f, 0x0000000c)
    TEST_MATCH(0x2d8eab1b, 0x06da304b, 0x00000016)
    TEST_MATCH(0x0b165d39, 0x2d1eee72, 0x00000001)
    TEST_MATCH(0x5d16ec34, 0x3bd028d3, 0x00000002)
    TEST_MATCH(0x3b0586ce, 0x0639cd18, 0x0000000d)
    TEST_MATCH(0x0dca5e70, 0x3c7b1c2d, 0x00000006)
    TEST_MATCH(0x76422df2, 0x355813c8, 0x00000002)
    TEST_MATCH(0x6a68c9b5, 0x464d6a85, 0x00000009)
    TEST_MATCH(0x469eced2, 0x61e90648, 0x0000000f)
    TEST_MATCH(0x324cb182, 0x5413582e, 0x00000004)
    TEST_MATCH(0x5beaae3f, 0x307e700a, 0x00000011)
    TEST_MATCH(0x3c5cb001, 0x00fcd70c, 0x00000017)
    TEST_MATCH(0x0d072e16, 0x01b52516, 0x00000000)
    TEST_MATCH(0x55e7c3e7, 0x49d2139e, 0x00000002)
    TEST_MATCH(0x73e5d831, 0x73134b48, 0x00000014)
    TEST_MATCH(0x6e1c3e4e, 0x1ea1acf7, 0xffffffff)
    TEST_MATCH(0x66fd0061, 0x443ec22c, 0x00000009)
    TEST_MATCH(0x56d1953d, 0x317559ed, 0x00000003)
    TEST_MATCH(0x79b3c382, 0x463c1258, 0x0000000b)
    TEST_MATCH(0x3ecb5aa3, 0x5efe8c82, 0x0000000a)
    TEST_MATCH(0x52b3d0db, 0x66deaaf0, 0x00000013)
    TEST_MATCH(0x3366c0e8, 0x3ea57402, 0x00000007)
    TEST_MATCH(0x6bbb6bf5, 0x6218f5fa, 0x00000008)
    TEST_MATCH(0x079d721a, 0x71a1b73b, 0x00000014)
    TEST_MATCH(0x3552c6b3, 0x159fd08e, 0x00000013)
    TEST_MATCH(0x62089704, 0x10da041a, 0x00000008)
    TEST_MATCH(0x4afd0495, 0x0b2b4bf1, 0x00000011)
    TEST_MATCH(0x64a655ff, 0x1aff7014, 0x00000010)
    TEST_MATCH(0x0cbb32be, 0x2e1e76f9, 0x00000002)
    TEST_MATCH(0x10bf6f59, 0x5a565564, 0x00000002)
    TEST_MATCH(0x03b79111, 0x0529f311, 0x00000000)
    TEST_MATCH(0x371763e1, 0x58550dc3, 0x00000001)
    TEST_MATCH(0x124c250c, 0x40ccb470, 0x00000014)
    TEST_MATCH(0x059bcf09, 0x096f8574, 0x00000018)
    TEST_MATCH(0x3b6fed5d, 0x3cb332ea, 0x00000003)
###detect exception
    bne s2, zero, inst_error
    nop
###score ++
    addiu s3, s3, 1
###output (s0<<24)|s3
inst_error:  
    sll t1, s0, 24
    or t0, t1, s3 
    sw t0, 0(s1)
    jr ra
    nop
END(n1_lui_test)
